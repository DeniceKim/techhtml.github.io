{"version":3,"sources":["webpack:///path---index-8b32da23008a303e53ce.js","webpack:///./.cache/json/index.json"],"names":["webpackJsonp","837","module","exports","data","code","edges","node","id","internal","contentDigest","examples","fields","slug","frontmatter","title","html","marketing","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,QAAUC,MAAQC,GAAA,qCAAAC,UAAsDC,cAAA,82BAAk4BH,MAAQC,GAAA,qBAAAC,UAAsCC,cAAA,sPAA0QH,MAAQC,GAAA,uBAAAC,UAAwCC,cAAA,8jBAAglBH,MAAQC,GAAA,iBAAAC,UAAkCC,cAAA,o0CAAm1CC,UAAaL,QAAUC,MAAQK,QAAUC,KAAA,0CAAgDC,aAAgBC,MAAA,WAAkBC,KAAA,4kBAA0lBT,MAAQK,QAAUC,KAAA,4CAAkDC,aAAgBC,MAAA,mCAA0CC,KAAA,uMAA+MT,MAAQK,QAAUC,KAAA,sCAA4CC,aAAgBC,MAAA,UAAiBC,KAAA,6MAAqNT,MAAQK,QAAUC,KAAA,0DAAgEC,aAAgBC,MAAA,qBAA4BC,KAAA,yKAAgLC,WAAcX,QAAUC,MAAQO,aAAeC,MAAA,OAAcC,KAAA,oKAA4KT,MAAQO,aAAeC,MAAA,WAAkBC,KAAA,6JAAqKT,MAAQO,aAAeC,MAAA,qBAA4BC,KAAA,+NAAwOE","file":"path---index-8b32da23008a303e53ce.js","sourcesContent":["webpackJsonp([142629428675168],{\n\n/***/ 837:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"code\":{\"edges\":[{\"node\":{\"id\":\"a-component-using-external-plugins\",\"internal\":{\"contentDigest\":\"\\\"class MarkdownEditor extends React.Component {\\\\n  constructor(props) {\\\\n    super(props);\\\\n    this.handleChange = this.handleChange.bind(this);\\\\n    this.state = { value: 'Type some *markdown* here!' };\\\\n  }\\\\n\\\\n  handleChange(e) {\\\\n    this.setState({ value: e.target.value });\\\\n  }\\\\n\\\\n  getRawMarkup() {\\\\n    const md = new Remarkable();\\\\n    return { __html: md.render(this.state.value) };\\\\n  }\\\\n\\\\n  render() {\\\\n    return (\\\\n      <div className=\\\\\\\"MarkdownEditor\\\\\\\">\\\\n        <h3>Input</h3>\\\\n        <textarea\\\\n          onChange={this.handleChange}\\\\n          defaultValue={this.state.value}\\\\n        />\\\\n        <h3>Output</h3>\\\\n        <div\\\\n          className=\\\\\\\"content\\\\\\\"\\\\n          dangerouslySetInnerHTML={this.getRawMarkup()}\\\\n        />\\\\n      </div>\\\\n    );\\\\n  }\\\\n}\\\\n\\\\nReactDOM.render(<MarkdownEditor />, mountNode);\\\"\"}}},{\"node\":{\"id\":\"a-simple-component\",\"internal\":{\"contentDigest\":\"\\\"class HelloMessage extends React.Component {\\\\n  render() {\\\\n    return (\\\\n      <div>\\\\n        Hello {this.props.name}\\\\n      </div>\\\\n    );\\\\n  }\\\\n}\\\\n\\\\nReactDOM.render(\\\\n  <HelloMessage name=\\\\\\\"Taylor\\\\\\\" />,\\\\n  mountNode\\\\n);\\\"\"}}},{\"node\":{\"id\":\"a-stateful-component\",\"internal\":{\"contentDigest\":\"\\\"class Timer extends React.Component {\\\\n  constructor(props) {\\\\n    super(props);\\\\n    this.state = { seconds: 0 };\\\\n  }\\\\n\\\\n  tick() {\\\\n    this.setState(prevState => ({\\\\n      seconds: prevState.seconds + 1\\\\n    }));\\\\n  }\\\\n\\\\n  componentDidMount() {\\\\n    this.interval = setInterval(() => this.tick(), 1000);\\\\n  }\\\\n\\\\n  componentWillUnmount() {\\\\n    clearInterval(this.interval);\\\\n  }\\\\n\\\\n  render() {\\\\n    return (\\\\n      <div>\\\\n        Seconds: {this.state.seconds}\\\\n      </div>\\\\n    );\\\\n  }\\\\n}\\\\n\\\\nReactDOM.render(<Timer />, mountNode);\\\"\"}}},{\"node\":{\"id\":\"an-application\",\"internal\":{\"contentDigest\":\"\\\"class TodoApp extends React.Component {\\\\n  constructor(props) {\\\\n    super(props);\\\\n    this.state = { items: [], text: '' };\\\\n    this.handleChange = this.handleChange.bind(this);\\\\n    this.handleSubmit = this.handleSubmit.bind(this);\\\\n  }\\\\n\\\\n  render() {\\\\n    return (\\\\n      <div>\\\\n        <h3>TODO</h3>\\\\n        <TodoList items={this.state.items} />\\\\n        <form onSubmit={this.handleSubmit}>\\\\n          <input\\\\n            onChange={this.handleChange}\\\\n            value={this.state.text}\\\\n          />\\\\n          <button>\\\\n            Add #{this.state.items.length + 1}\\\\n          </button>\\\\n        </form>\\\\n      </div>\\\\n    );\\\\n  }\\\\n\\\\n  handleChange(e) {\\\\n    this.setState({ text: e.target.value });\\\\n  }\\\\n\\\\n  handleSubmit(e) {\\\\n    e.preventDefault();\\\\n    if (!this.state.text.length) {\\\\n      return;\\\\n    }\\\\n    const newItem = {\\\\n      text: this.state.text,\\\\n      id: Date.now()\\\\n    };\\\\n    this.setState(prevState => ({\\\\n      items: prevState.items.concat(newItem),\\\\n      text: ''\\\\n    }));\\\\n  }\\\\n}\\\\n\\\\nclass TodoList extends React.Component {\\\\n  render() {\\\\n    return (\\\\n      <ul>\\\\n        {this.props.items.map(item => (\\\\n          <li key={item.id}>{item.text}</li>\\\\n        ))}\\\\n      </ul>\\\\n    );\\\\n  }\\\\n}\\\\n\\\\nReactDOM.render(<TodoApp />, mountNode);\\\"\"}}}]},\"examples\":{\"edges\":[{\"node\":{\"fields\":{\"slug\":\"/home/examples/a-simple-component.html\"},\"frontmatter\":{\"title\":\"단일 컴포넌트\"},\"html\":\"<p>React 컴포넌트는 입력 데이터를 받고 화면에 표시할 것을 반환하는 <code>render()</code> 메서드를 구현했습니다.\\n이 예제는 JSX라는 유사 XML 문법을 사용하고 있습니다. 컴포넌트에서 전달하는 입력 데이터는 <code>this.props</code>를 통해 <code>render()</code> 에서 접근할 수 있습니다.</p>\\n<p><strong>JSX는 React를 사용할 때 필수가 아닌 옵션입니다.</strong> <a href=\\\"https://babeljs.io/repl/#?presets=react&code_lz=MYewdgzgLgBApgGzgWzmWBeGAeAFgRgD4AJRBEAGhgHcQAnBAEwEJsB6AwgbgChRJY_KAEMAlmDh0YWRiGABXVOgB0AczhQAokiVQAQgE8AkowAUPGDADkdECChWeASl4AlOMOBQAIgHkAssp0aIySpogoaFBUQmISdC48QA\\\" target=\\\"_blank\\\" rel=\\\"noreferrer\\\">Babel REPL</a> 을 사용하여 JSX 컴파일 단계에서 생성된 원시 JavaScript 코드를 확인해보세요.</p>\"}},{\"node\":{\"fields\":{\"slug\":\"/home/examples/a-stateful-component.html\"},\"frontmatter\":{\"title\":\"상태 기반 컴포넌트 (Stateful component)\"},\"html\":\"<p>입력 데이터를 가져오는 것 외에도 (<code>this.props</code> 를 통해 접근), 컴포넌트는 내부 상태 데이터를 관리할 수 있습니다 (<code>this.state</code> 를 통해 접근). 컴포넌트의 상태 데이터가 바뀌면, 렌더링된 마크업은 <code>render()</code> 를 다시 호출하여 업데이트됩니다.</p>\"}},{\"node\":{\"fields\":{\"slug\":\"/home/examples/an-application.html\"},\"frontmatter\":{\"title\":\"어플리케이션\"},\"html\":\"<p><code>props</code> 와 <code>state</code> 를 사용하여 간단한 Todo 어플리케이션을 만들 수 있습니다. 이 예제에서는 <code>state</code> 를 사용하여 사용자가 입력한 텍스트뿐만 아니라 아이템의 현재 리스트를 추적합니다. 이벤트 핸들러는 인라인으로 보이지만, 이벤트 위임을 사용해 구현하고 수집됩니다.</p>\"}},{\"node\":{\"fields\":{\"slug\":\"/home/examples/a-component-using-external-plugins.html\"},\"frontmatter\":{\"title\":\"외부 플러그인을 사용한 컴포넌트\"},\"html\":\"<p>React는 유연하며 다른 라이브러리나 프레임워크에 접근할 수 있게하는 훅을 제공합니다. 이 예제에서는 외부 마크다운 라이브러리인 <strong>remarkable</strong> 을 사용하여 <code>&#x3C;textarea></code> 의 값을 실시간으로 변환해줍니다.</p>\"}}]},\"marketing\":{\"edges\":[{\"node\":{\"frontmatter\":{\"title\":\"선언형\"},\"html\":\"<p>React는 대화형 UI를 만드는 데 어려움을 줄입니다. 어플리케이션의 각 상태에 대한 간단한 뷰를 설계하면 React는 데이터가 변경될 때 적절한 구성요소만 효과적으로 업데이트하고 렌더링합니다.</p>\\n<p>선언형 뷰는 코드를 예측 가능하고 디버그하기 쉽게 만듭니다.</p>\"}},{\"node\":{\"frontmatter\":{\"title\":\"컴포넌트 기반\"},\"html\":\"<p>스스로 상태를 가지고 관리하는 캡슐화된 컴포넌트를 생성한 다음 복잡한 UI를 만들기 위해 구성합니다.</p>\\n<p>컴포넌트 로직은 템플릿 대신 JavaScript로 작성되므로, 앱을 통해 풍부한 데이터를 쉽게 전달하고 DOM에서 상태를 유지할 수 있습니다.</p>\"}},{\"node\":{\"frontmatter\":{\"title\":\"한번 배우고, 어디서나 작성한다\"},\"html\":\"<p>기술 스택의 나머지 부분에 대해 가정하지 않으므로, 기존 코드를 다시 작성하지 않고 React에서 새로운 기능을 개발할 수 있습니다.</p>\\n<p>React는 <a href=\\\"https://facebook.github.io/react-native/\\\">React Native</a>를 이용하여 강력한 모바일앱을 만들거나\\nNode를 사용한 서버에서 렌더링할 수도 있습니다.</p>\"}}]}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---index-8b32da23008a303e53ce.js","module.exports = {\"data\":{\"code\":{\"edges\":[{\"node\":{\"id\":\"a-component-using-external-plugins\",\"internal\":{\"contentDigest\":\"\\\"class MarkdownEditor extends React.Component {\\\\n  constructor(props) {\\\\n    super(props);\\\\n    this.handleChange = this.handleChange.bind(this);\\\\n    this.state = { value: 'Type some *markdown* here!' };\\\\n  }\\\\n\\\\n  handleChange(e) {\\\\n    this.setState({ value: e.target.value });\\\\n  }\\\\n\\\\n  getRawMarkup() {\\\\n    const md = new Remarkable();\\\\n    return { __html: md.render(this.state.value) };\\\\n  }\\\\n\\\\n  render() {\\\\n    return (\\\\n      <div className=\\\\\\\"MarkdownEditor\\\\\\\">\\\\n        <h3>Input</h3>\\\\n        <textarea\\\\n          onChange={this.handleChange}\\\\n          defaultValue={this.state.value}\\\\n        />\\\\n        <h3>Output</h3>\\\\n        <div\\\\n          className=\\\\\\\"content\\\\\\\"\\\\n          dangerouslySetInnerHTML={this.getRawMarkup()}\\\\n        />\\\\n      </div>\\\\n    );\\\\n  }\\\\n}\\\\n\\\\nReactDOM.render(<MarkdownEditor />, mountNode);\\\"\"}}},{\"node\":{\"id\":\"a-simple-component\",\"internal\":{\"contentDigest\":\"\\\"class HelloMessage extends React.Component {\\\\n  render() {\\\\n    return (\\\\n      <div>\\\\n        Hello {this.props.name}\\\\n      </div>\\\\n    );\\\\n  }\\\\n}\\\\n\\\\nReactDOM.render(\\\\n  <HelloMessage name=\\\\\\\"Taylor\\\\\\\" />,\\\\n  mountNode\\\\n);\\\"\"}}},{\"node\":{\"id\":\"a-stateful-component\",\"internal\":{\"contentDigest\":\"\\\"class Timer extends React.Component {\\\\n  constructor(props) {\\\\n    super(props);\\\\n    this.state = { seconds: 0 };\\\\n  }\\\\n\\\\n  tick() {\\\\n    this.setState(prevState => ({\\\\n      seconds: prevState.seconds + 1\\\\n    }));\\\\n  }\\\\n\\\\n  componentDidMount() {\\\\n    this.interval = setInterval(() => this.tick(), 1000);\\\\n  }\\\\n\\\\n  componentWillUnmount() {\\\\n    clearInterval(this.interval);\\\\n  }\\\\n\\\\n  render() {\\\\n    return (\\\\n      <div>\\\\n        Seconds: {this.state.seconds}\\\\n      </div>\\\\n    );\\\\n  }\\\\n}\\\\n\\\\nReactDOM.render(<Timer />, mountNode);\\\"\"}}},{\"node\":{\"id\":\"an-application\",\"internal\":{\"contentDigest\":\"\\\"class TodoApp extends React.Component {\\\\n  constructor(props) {\\\\n    super(props);\\\\n    this.state = { items: [], text: '' };\\\\n    this.handleChange = this.handleChange.bind(this);\\\\n    this.handleSubmit = this.handleSubmit.bind(this);\\\\n  }\\\\n\\\\n  render() {\\\\n    return (\\\\n      <div>\\\\n        <h3>TODO</h3>\\\\n        <TodoList items={this.state.items} />\\\\n        <form onSubmit={this.handleSubmit}>\\\\n          <input\\\\n            onChange={this.handleChange}\\\\n            value={this.state.text}\\\\n          />\\\\n          <button>\\\\n            Add #{this.state.items.length + 1}\\\\n          </button>\\\\n        </form>\\\\n      </div>\\\\n    );\\\\n  }\\\\n\\\\n  handleChange(e) {\\\\n    this.setState({ text: e.target.value });\\\\n  }\\\\n\\\\n  handleSubmit(e) {\\\\n    e.preventDefault();\\\\n    if (!this.state.text.length) {\\\\n      return;\\\\n    }\\\\n    const newItem = {\\\\n      text: this.state.text,\\\\n      id: Date.now()\\\\n    };\\\\n    this.setState(prevState => ({\\\\n      items: prevState.items.concat(newItem),\\\\n      text: ''\\\\n    }));\\\\n  }\\\\n}\\\\n\\\\nclass TodoList extends React.Component {\\\\n  render() {\\\\n    return (\\\\n      <ul>\\\\n        {this.props.items.map(item => (\\\\n          <li key={item.id}>{item.text}</li>\\\\n        ))}\\\\n      </ul>\\\\n    );\\\\n  }\\\\n}\\\\n\\\\nReactDOM.render(<TodoApp />, mountNode);\\\"\"}}}]},\"examples\":{\"edges\":[{\"node\":{\"fields\":{\"slug\":\"/home/examples/a-simple-component.html\"},\"frontmatter\":{\"title\":\"단일 컴포넌트\"},\"html\":\"<p>React 컴포넌트는 입력 데이터를 받고 화면에 표시할 것을 반환하는 <code>render()</code> 메서드를 구현했습니다.\\n이 예제는 JSX라는 유사 XML 문법을 사용하고 있습니다. 컴포넌트에서 전달하는 입력 데이터는 <code>this.props</code>를 통해 <code>render()</code> 에서 접근할 수 있습니다.</p>\\n<p><strong>JSX는 React를 사용할 때 필수가 아닌 옵션입니다.</strong> <a href=\\\"https://babeljs.io/repl/#?presets=react&code_lz=MYewdgzgLgBApgGzgWzmWBeGAeAFgRgD4AJRBEAGhgHcQAnBAEwEJsB6AwgbgChRJY_KAEMAlmDh0YWRiGABXVOgB0AczhQAokiVQAQgE8AkowAUPGDADkdECChWeASl4AlOMOBQAIgHkAssp0aIySpogoaFBUQmISdC48QA\\\" target=\\\"_blank\\\" rel=\\\"noreferrer\\\">Babel REPL</a> 을 사용하여 JSX 컴파일 단계에서 생성된 원시 JavaScript 코드를 확인해보세요.</p>\"}},{\"node\":{\"fields\":{\"slug\":\"/home/examples/a-stateful-component.html\"},\"frontmatter\":{\"title\":\"상태 기반 컴포넌트 (Stateful component)\"},\"html\":\"<p>입력 데이터를 가져오는 것 외에도 (<code>this.props</code> 를 통해 접근), 컴포넌트는 내부 상태 데이터를 관리할 수 있습니다 (<code>this.state</code> 를 통해 접근). 컴포넌트의 상태 데이터가 바뀌면, 렌더링된 마크업은 <code>render()</code> 를 다시 호출하여 업데이트됩니다.</p>\"}},{\"node\":{\"fields\":{\"slug\":\"/home/examples/an-application.html\"},\"frontmatter\":{\"title\":\"어플리케이션\"},\"html\":\"<p><code>props</code> 와 <code>state</code> 를 사용하여 간단한 Todo 어플리케이션을 만들 수 있습니다. 이 예제에서는 <code>state</code> 를 사용하여 사용자가 입력한 텍스트뿐만 아니라 아이템의 현재 리스트를 추적합니다. 이벤트 핸들러는 인라인으로 보이지만, 이벤트 위임을 사용해 구현하고 수집됩니다.</p>\"}},{\"node\":{\"fields\":{\"slug\":\"/home/examples/a-component-using-external-plugins.html\"},\"frontmatter\":{\"title\":\"외부 플러그인을 사용한 컴포넌트\"},\"html\":\"<p>React는 유연하며 다른 라이브러리나 프레임워크에 접근할 수 있게하는 훅을 제공합니다. 이 예제에서는 외부 마크다운 라이브러리인 <strong>remarkable</strong> 을 사용하여 <code>&#x3C;textarea></code> 의 값을 실시간으로 변환해줍니다.</p>\"}}]},\"marketing\":{\"edges\":[{\"node\":{\"frontmatter\":{\"title\":\"선언형\"},\"html\":\"<p>React는 대화형 UI를 만드는 데 어려움을 줄입니다. 어플리케이션의 각 상태에 대한 간단한 뷰를 설계하면 React는 데이터가 변경될 때 적절한 구성요소만 효과적으로 업데이트하고 렌더링합니다.</p>\\n<p>선언형 뷰는 코드를 예측 가능하고 디버그하기 쉽게 만듭니다.</p>\"}},{\"node\":{\"frontmatter\":{\"title\":\"컴포넌트 기반\"},\"html\":\"<p>스스로 상태를 가지고 관리하는 캡슐화된 컴포넌트를 생성한 다음 복잡한 UI를 만들기 위해 구성합니다.</p>\\n<p>컴포넌트 로직은 템플릿 대신 JavaScript로 작성되므로, 앱을 통해 풍부한 데이터를 쉽게 전달하고 DOM에서 상태를 유지할 수 있습니다.</p>\"}},{\"node\":{\"frontmatter\":{\"title\":\"한번 배우고, 어디서나 작성한다\"},\"html\":\"<p>기술 스택의 나머지 부분에 대해 가정하지 않으므로, 기존 코드를 다시 작성하지 않고 React에서 새로운 기능을 개발할 수 있습니다.</p>\\n<p>React는 <a href=\\\"https://facebook.github.io/react-native/\\\">React Native</a>를 이용하여 강력한 모바일앱을 만들거나\\nNode를 사용한 서버에서 렌더링할 수도 있습니다.</p>\"}}]}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/index.json\n// module id = 837\n// module chunks = 142629428675168"],"sourceRoot":""}